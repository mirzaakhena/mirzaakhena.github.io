import{_ as e,o as i,c as a,d as n}from"./app.1755948f.js";const o={},t=n('<h1 id="code-generation-behaviour" tabindex="-1"><a class="header-anchor" href="#code-generation-behaviour" aria-hidden="true">#</a> Code Generation Behaviour</h1><h2 id="create-new-file" tabindex="-1"><a class="header-anchor" href="#create-new-file" aria-hidden="true">#</a> Create new file</h2><p>Create a file or folder is the basic things the gogen do</p><h2 id="ignore-the-existing-file" tabindex="-1"><a class="header-anchor" href="#ignore-the-existing-file" aria-hidden="true">#</a> Ignore the existing file</h2><p>Whenever gogen want to create a file with some name, it will check if the file is already exist or not. If it already exist then gogen will ignore it because gogen don&#39;t want to ruin the existing code. (next feature gogen will inform which file skipped)</p><h2 id="code-injection" tabindex="-1"><a class="header-anchor" href="#code-injection" aria-hidden="true">#</a> Code injection</h2><h3 id="manual-injection" tabindex="-1"><a class="header-anchor" href="#manual-injection" aria-hidden="true">#</a> Manual injection</h3><h3 id="auto-injection" tabindex="-1"><a class="header-anchor" href="#auto-injection" aria-hidden="true">#</a> Auto injection</h3><p>Gogen will automatically inject some code in the Outport whenever user run <code>gogen repository</code> or <code>gogen service</code></p><h3 id="in-middle-of-code" tabindex="-1"><a class="header-anchor" href="#in-middle-of-code" aria-hidden="true">#</a> in middle of code</h3><h3 id="in-last-line-of-code" tabindex="-1"><a class="header-anchor" href="#in-last-line-of-code" aria-hidden="true">#</a> in last line of code</h3>',11),r=[t];function d(h,c){return i(),a("div",null,r)}const s=e(o,[["render",d],["__file","code-generation-behaviour.html.vue"]]);export{s as default};
